#!/usr/bin/env python
# license removed for brevity
import rospy, tf
from dynamic_graph_bridge_msgs.msg import Vector
from sensor_msgs.msg import JointState
import sys

# Arg 1
input_topic = "/sot_hpp/state"
# Arg 2
output_topic = "/sot/joint_state"
# Arg 3
publish_root_wrt_odom = False
if len(sys.argv)>1:
    input_topic = sys.argv[1]
    if len(sys.argv)>2:
        output_topic = sys.argv[2]
        if len(sys.argv)>3:
            publish_root_wrt_odom = (sys.argv[3].lower() in ("true","on"))

rospy.init_node('sot_reemitter', anonymous=True)
pub = rospy.Publisher(output_topic, JointState, queue_size=10)
    
seqnb = 0
aJS = JointState()

if publish_root_wrt_odom:
    if output_topic.find('/') >= 0:
        output_prefix = output_topic.rsplit('/',1)[0] + '/'
    else:
        output_prefix = ""
    rospy.loginfo("Will publish " + output_prefix + "base_footprint with respect to " + output_prefix + "odom")

jointnames =  rospy.get_param("/sot_controller/joint_names")
    
def jointreceived(jstates):
    global seqnb
    seqnb = seqnb+1
    time = rospy.Time.now()
    aJS.header.seq = seqnb
    aJS.header.stamp = time
    aJS.header.frame_id = "base_footprint"
    aJS.name = jointnames
    aJS.position = jstates.data[6:]
    aJS.velocity = []
    aJS.effort = []
    pub.publish(aJS)

    if publish_root_wrt_odom and len(jstates.data) > 6:
        br = tf.TransformBroadcaster()
        br.sendTransform(jstates.data[0:3],
                         tf.transformations.quaternion_from_euler(
                             jstates.data[3], jstates.data[4], jstates.data[5]),
                         time,
                         output_prefix + "base_footprint",
                         output_prefix + "odom")

def listener():
    rospy.Subscriber(input_topic, Vector, jointreceived)
    rospy.spin()
    
if __name__ == '__main__':
    try:
        listener()
    except rospy.ROSInterruptException:
        pass
